https://github.com/cprakash2118/DO280-1stAug25

Quick Recap:-
Point-01-) Classroom environment:-
 W.r.t Login to VMs:-
 - student/student 
 - root/redhat 
 
 W.r.t Login to OCP cluster:-
 - admin/redhatocp 
 - developer/developer
 
 Login to Workstation node (via Console) - Click on "Open Console" 
 FYI- workstation node as JUMP server, used for login to OCP cluster.
 
 - OPen Terminal - "Click on Activity" then click on "Terminal".
 
 Login to OCP cluster:-
 $ oc login -u admin -p redhatocp https://api.ocp4.example.com:6443
 FYI- Login to OCP cluster, required below points.
 userName=admin
 password=redhatocp 
 apiURL=https://api.ocp4.example.com:6443 
 
 apiURL=https://api.clusterName.baseDomain:6443 
 clusterName=ocp4
 baseDomain=example.com 
 part=6443 
 
 $ oc whoami 
 admin 
 $ oc whoami -t 
 akjsdhasjdkasjdhaskj
 $ oc whoami --show-console 
 https://console-openshift-console.apps.ocp4.example.com 
 Use same admin/redhatocp credentials to login to OCP cluster via Web COnsole.
 
Day-02-lab-01:- 
Task-01:-
 - Login to OCP cluster using CLI
 - Login to OCP cluster using Web Console
 
Solution:-
 - Login to workstation.
 - Open termianl and access to OCP user via (username/password and API URL).
 - Get the web console URL and try to login to OCP cluster via admin/password.
 - Select "Red Hat Identity Management" then provide admin/redhatocp logins.

*********************************
$ root@utlity 
# cd /home/lab/ocp4/auth
# ls 
kubeconfig kubeadmin-password 
# scp -r kube* student@workstation:/home/student/
Some messsage the press "y" and continue...
Student's Password: student 
# exit
$ cat /home/student/kubeadmin-password ; echo 
alksdjlkasjdlsak
$ oc login -u kubeadmin -p alksdjlkasjdlsak https://api.ocp4.example.com:6443 

------ Backdoor entry for cluster-admin --------------
$ ls -l kubeadmin
$ export KUBECONFIG=/home/student/kubeconfig 
$ env | grep KUBECONFIG
KUBECONFIG=/home/student/kubeconfig
$ unset KUBECONFIG
$ env | grep KUBECONFIG
No Output 

$ oc get pods -n openshift-authentication
$ oc get pods -n openshift-apiserver 
$ oc get pods -n openshift-kube-apiserver
$ oc get pods -n openshift-etcd 
$ oc get pods -n openshift-controller

If all pods are running then all to login to OCP cluster.
##############################################################################
Day-02: 

Unit-3-# Authentication and Authorization
- Configure Identity Providers.
- Define and Apply Permissions with RBAC.

Task-01:- Need to enable team access to OCP cluster via IdP=htpasswd.
UserName - user1 to user5
Password - redhat123
file-uploadName - htpasswd-upload-sre-team
SecretName - secret-sre-team 
IdP Name - IdP-htpasswd-sre-team 
 
Solution:- Using IdP (htpasswd) login to OCp cluster and provide required/admin level access.

Step-01:- Required user/passowrd database.
$ htpasswd --help 
$ htpasswd -c -B -b  htpasswd-upload-sre-team user1 redhat123 
$ cat htpasswd-upload-sre-team
$ htpasswd    -B -b  htpasswd-upload-sre-team user2 redhat123
$ htpasswd    -B -b  htpasswd-upload-sre-team user3 redhat123 
$ htpasswd    -B -b  htpasswd-upload-sre-team user4 redhat123
$ htpasswd    -B -b  htpasswd-upload-sre-team user5 redhat123

Step-02:- Inject the information( from file data)  to OCP cluster via "secret".
FYI- "secret" is k8s/ocp resource.

Note: You must be login to OCP cluster as "cluster-admin" [FYI- cluster-admin is same as root account w.r.t Linux]

$ oc login -u admin -p redhatocp https://api.ocp4.example.com:6443 
$ oc whoami 
admin
$ oc version 
$ oc get nodes 

$ oc create secret generic secret-sre-team --from-file htpasswd=htpasswd-upload-sre-team -n openshift-config
FYI:-
 SecretType=generic 
 SecretName=secret-sre-team
 Data - From file 
 -n (namespace)=openshift-config 

Once secret created then verify the secret.
$ oc get secret secret-sre-team -n openshift-config
$ oc get secret secret-sre-team -n openshift-config -o yaml
$ oc get secret secret-sre-team -n openshift-config -o json 
  
FYI
- Namespace is a resource which allow to keep other k8s/ocp resources.
- Example:- condier k8s/ocp "namespace" same as "Directory" w.r.t Linux/Unix.
- k8s/ocp resources - pod,replicaset,deployment,secret,configmap, etc.

Step-03:- Update to "oauth" w.r.t IdP (Identity Provider - htpasswd, LDAP, OpenID Connect, RHSSO, IBM SSO etc), secret details.

$ oc get oauth cluster 
$ oc get oauth cluster -o yaml 
$ oc get oauth cluster -o yaml > oauth.yaml  (It can be anyname but with *.yaml/yml extention). 

What informaiton we need to update?
Who we will get the syntax, any reference link/doc? 

Answer is "yes" - doc called CUDO (Customer Documentation).
https://docs.redhat.com/en/documentation/openshift_container_platform/4.14
https://docs.redhat.com/en/documentation/openshift_container_platform/4.14/html/authentication_and_authorization/index

- Open in single HTMl page of PDF.
- Search for "identityProvider" 


vim oauth.yaml 



:set paste (enter)
again 
:set cuc (enter)
then press "i" key for insert mode and paste below contents.

  - name: IdP-htpasswd-sre-team 
    mappingMethod: claim 
    type: HTPasswd
    htpasswd:
      fileData:
        name: secret-sre-team 

Press "Esc" key to lock mode.
:wq (enter)


$ oc apply -f oauth.yaml 
$ oc get pods -n openshift-authetication
$ watch oc get pods -n openshift-authetication   (To come out from here - press "ctrl + c).


Login to ocp cluster using your users accounts.

$ oc login -u user1 -p redhat123 https://api.ocp4.example.com:6443 
$ oc whoami 
$ oc whoami -t 

Login to other users also and verify the work.
Once all login verifed the login back to cluster-admin via admin/kubeadmin user.

$ oc login -u admin -p redhat123 https://api.ocp4.example.com:6443 
$ oc whoami 
admin
$oc get users 
$ oc get identity 
$ oc adm policy add-cluster-role-user cluster-admin user11 

Login via user11 and verify.

TASK end here.
##############################################################################

Point-1-# Login to OCP cluster.
 - Token based authentication (via "Oauth" - oc get oauth cluster)
   FYI
   - "Oauth" is an identity broker.
   - Oauth (on behalf of Red Hat OpenSHift) sync with IdP (Identity Provider - htpasswd,LDAP,Keystone etc).
   - Authentication done by IdP only, authorization done by "oauth".
   - users [oc get users]
   - identity [oc get identity]
   - users can be part of groups [We will add users to groups for easy operations]
  
  - Certificate based authentication:-
    via kubeconfig file (client-certificate)
	- backdoor entry for cluster-admin (If Oauth not working).
	- auditor entry to OCP cluster for cluster audit.
	
	

*********************************
$ root@utlity 
# cd /home/lab/ocp4/auth
# ls 
kubeconfig kubeadmin-password 
# scp -r kube* student@workstation:/home/student/
Some messsage the press "y" and continue...
Student's Password: student 
# exit
$ cat /home/student/kubeadmin-password ; echo 
alksdjlkasjdlsak
$ oc login -u kubeadmin -p alksdjlkasjdlsak https://api.ocp4.example.com:6443 

------ Backdoor entry for cluster-admin --------------
$ ls -l kubeadmin
$ export KUBECONFIG=/home/student/kubeconfig 
$ env | grep KUBECONFIG
KUBECONFIG=/home/student/kubeconfig
$ unset KUBECONFIG
$ env | grep KUBECONFIG
No Output 


1- $ oc whoami --kubeconfig /location/of/kubeconfig/file 
Eg: $ oc whoami --kubeconfig /home/student/kubeconfig 

2- $ env | grep KUBECONFIG
    NO output mean KUBECONFIG not loaded.
   $ export KUBECONFIG=/home/student/kubeconfig
   $ env | grep KUBECONFIG
   KUBECONFIG=/home/student/kubeconfig
   $ oc whoami 
   $ oc whoami -t
   
3- $ cp -rpv /home/student/kubeconfig to /home/student/.kube/config 
   $ oc whoami 
   $ oc whoami -t 
   
 
- Who created kubeconfig & kubeadmin-password files.

$ ssh root@utility 
# cd /home/lab/ocp4/auth 
# ls 
kubeconfig kubeadmin-password
# cd /home/lab/ocp4
# mkdir demo 
# cp -rpv install-config.yaml.bkp openshift-install demo 
# cd demo
# ls -l 
install-config.yaml.bkp openshift-install
# mv install-config.yaml.bkp install-config.yaml
# vim install-config.yaml

# Refer the screenshot (image01,image-02).






























 

 
 
 